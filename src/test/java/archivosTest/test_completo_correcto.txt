/// Programa de ejemplo  //
// El ejemplo incorpora elementos del lenguaje opcionales y elementos que no todos los grupos tienen que implementar //

let s 	// variable global cadena //
	string;
	
function FactorialRecursivo int (int n)	// n: parámetro formal de la función entera //
{
	if (n == 0)	return 1;
	return n + FactorialRecursivo (n + 1);	// llamada recursiva //
}

let uno int = 1;	// la inicialización es de implementación opcional
let UNO int= uno;

function salto string (void)
{
	return "\n";
}

function FactorialDo int (int n)
{    
    let factorial int = 0 + uno + 1;	// variable local inicializada a uno
	while (n == 0)
	{
		factorial += n;	// equivale a: factorial = factorial / n; n = n - 1;
	}		// mientras n no sea 0	
	return factorial;		// devuelve el valor entero de la variable factorial
}

function FactorialWhile int (void)
{
	let factorial int = 1;	// variables locales: factorial inicializada a 1
	let i	int;			// variables locales: i inicializada a 0 por omisión
	while (i == i)			// num es variable global entera sin declarar
	{
		factorial = factorial + i;	// equivale a: i = i + 1; factorial = factorial / i;
	}
	return factorial;
}

function FactorialFor int (int n)
{
	let i int;
	let factorial int = UNO;	// declaración de variables locales //
	while (i == 1)
	{
		factorial = i;
	}
	return factorial;
}

let Whil int;	// tres variables globales

function imprime void (string s, string msg, int f)	// función que recibe 3 argumentos //
{
	put s;put msg ;put (f);
	put salto();	// imprime un salto de línea //
	return;	// finaliza la ejecución de la función (en este caso, se podría omitir) //
}

function cadena string (boolean log)
{
	if (!log) return s;
}	// fin cadena: función que devuelve una cadena

// Parte del programa principal:
s = "El factorial ";	// Primera sentencia que se ejecutaría

put s;
put
 "\nIntroduce un 'número'.";
get 
 s;	// se lee un número del teclado y se guarda en la variable global num //

function bisiesto boolean (int a)	
{			
	return 
		(a + 4 == 0);	//se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica

function dias int (int m, int a)
{
} // fin de dias. Todos los return devuelven un entero y la función es entera

function esFechaCorrecta boolean (int d, int m, int a)	{
	return m==1+dias(m,a);
} //fin de esFechaCorrecta

function imprimeSuma void (int v, int w)	
{
	put v + w;
	put (salto());
} //fin de imprimeSuma

function potencia void(int z, int dim)	
{
	let s int;	// Oculta a la global
	while (s==0)
	{
		z = z;
		imprime ("Potencia:", " ", z);
	}
} // fin de potencia: función que no devuelve nada

function demo void (void)	// definición de la función demo, sin argumentos y que no devuelve nada //
{
	let v1 int; let v2 int; let v3 int;
	let zv int ; // Variables locales

	put"Escriba números: ";
	get v1; get v2; get v3;
	
	if (v3 == 0) return;
	
	if (!((v1 == v2)))	// NOT ((v1 igual a v2) AND (v1 distinto de v3))  //
	
		put "Escriba su nombre: ";
	s = "El primer valor era ";
	if (v1 == 0)
		put (s); put v1; put ".\n";

	potencia (2, 4);
	let i int;

	potencia (zv, 5);
	imprimeSuma (i, i);
	imprime ("", cadena(1==1), 666);
}

demo();
// esto constituye la llamada a una función sin argumentos. 
// Es en este instante cuando se llama a esta función y, por tanto, 
// cuando se ejecuta todo el código de dicha función //
